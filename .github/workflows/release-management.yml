name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18.x'
  RUST_VERSION: '1.75'

jobs:
  # Version Validation and Preparation
  version-validation:
    name: Version Validation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/v}"
            IS_PRERELEASE="false"
          fi
          
          # Validate version format
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Check if version exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git tag -l | grep -q "v$VERSION"; then
            echo "Version v$VERSION already exists!"
            exit 1
          fi

      - name: Generate changelog
        run: |
          npm install -g conventional-changelog-cli
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0

      - name: Update version in files
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Update package.json
          npm version $VERSION --no-git-tag-version
          
          # Update Cargo.toml
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" Cargo.toml
          
          # Update other version files
          echo $VERSION > VERSION
          
          # Commit version updates
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "chore: bump version to $VERSION"

  # Build and Test Release
  build-release:
    name: Build Release
    runs-on: ${{ matrix.os }}
    needs: version-validation
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: windows
            arch: x64
          - os: macos-latest
            platform: macos
            arch: x64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies
        run: |
          npm ci
          cargo fetch

      - name: Run tests
        run: |
          npm run test:unit
          npm run test:integration
          cargo test

      - name: Build application
        run: npm run build

      - name: Build Tauri app
        run: npm run tauri:build

      - name: Package release
        run: |
          VERSION="${{ needs.version-validation.outputs.version }}"
          npm run package -- --version $VERSION

      - name: Create installer
        run: |
          VERSION="${{ needs.version-validation.outputs.version }}"
          npm run installer:create -- --version $VERSION

      - name: Sign binaries (Windows)
        if: matrix.platform == 'windows'
        run: |
          # Code signing for Windows
          echo "Signing Windows binaries..."
          # Add your code signing commands here

      - name: Sign binaries (macOS)
        if: matrix.platform == 'macos'
        run: |
          # Code signing for macOS
          echo "Signing macOS binaries..."
          # Add your code signing commands here

      - name: Notarize app (macOS)
        if: matrix.platform == 'macos'
        run: |
          # Notarization for macOS
          echo "Notarizing macOS app..."
          # Add your notarization commands here

      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            dist/
            target/release/bundle/
          retention-days: 90

  # Security Scanning for Release
  security-scan-release:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: build-release
    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v3
        with:
          name: release-linux-x64
          path: release-artifacts/

      - name: Run virus scan
        run: |
          sudo apt-get update
          sudo apt-get install -y clamav clamav-daemon
          sudo systemctl start clamav-daemon
          clamscan -r -i release-artifacts/ || true

      - name: Run security scan
        run: |
          npm run security:scan:release
          npm run security:report:release

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-release
          path: reports/security-release/
          retention-days: 90

  # Documentation for Release
  documentation-release:
    name: Documentation Release
    runs-on: ubuntu-latest
    needs: version-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate API documentation
        run: npm run docs:api

      - name: Generate user documentation
        run: npm run docs:user

      - name: Generate tutorials
        run: npm run docs:tutorials

      - name: Generate release notes
        run: |
          VERSION="${{ needs.version-validation.outputs.version }}"
          npm run docs:release-notes -- --version $VERSION

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation-release
          path: docs/dist/
          retention-days: 90

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version-validation, build-release, security-scan-release, documentation-release]
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Create release archives
        run: |
          VERSION="${{ needs.version-validation.outputs.version }}"
          
          # Create platform-specific archives
          cd artifacts/
          
          for dir in release-*; do
            if [ -d "$dir" ]; then
              cd "$dir"
              PLATFORM=$(echo "$dir" | sed 's/release-//')
              tar -czf "../navlambda-studio-$VERSION-$PLATFORM.tar.gz" .
              cd ..
            fi
          done
          
          # Create documentation archive
          cd documentation-release/
          tar -czf "../navlambda-studio-$VERSION-docs.tar.gz" .
          cd ..

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.version-validation.outputs.version }}"
          
          # Generate changelog for this release
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for this version
            sed -n "/^## \[$VERSION\]/,/^## \[/p" CHANGELOG.md | head -n -1 > release-notes.md
          else
            echo "## What's New in $VERSION" > release-notes.md
            echo "" >> release-notes.md
            echo "See the full changelog for details." >> release-notes.md
          fi
          
          # Add download links
          echo "" >> release-notes.md
          echo "## Downloads" >> release-notes.md
          echo "" >> release-notes.md
          echo "- [Linux (x64)](navlambda-studio-$VERSION-linux-x64.tar.gz)" >> release-notes.md
          echo "- [Windows (x64)](navlambda-studio-$VERSION-windows-x64.tar.gz)" >> release-notes.md
          echo "- [macOS (x64)](navlambda-studio-$VERSION-macos-x64.tar.gz)" >> release-notes.md
          echo "- [Documentation](navlambda-studio-$VERSION-docs.tar.gz)" >> release-notes.md

      - name: Create GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.version-validation.outputs.version }}
          name: NAVÎ› Studio v${{ needs.version-validation.outputs.version }}
          bodyFile: release-notes.md
          prerelease: ${{ needs.version-validation.outputs.is-prerelease }}
          artifacts: |
            artifacts/*.tar.gz
            artifacts/*.zip
          artifactErrorsFailBuild: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create git tag
        run: |
          VERSION="${{ needs.version-validation.outputs.version }}"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

  # Docker Release
  docker-release:
    name: Docker Release
    runs-on: ubuntu-latest
    needs: [version-validation, create-release]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            navlambda/studio
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.version-validation.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.version-validation.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.version-validation.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # NPM Package Release
  npm-release:
    name: NPM Package Release
    runs-on: ubuntu-latest
    needs: [version-validation, create-release]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build:package

      - name: Publish to NPM
        run: |
          VERSION="${{ needs.version-validation.outputs.version }}"
          npm version $VERSION --no-git-tag-version
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Homebrew Formula Update
  homebrew-release:
    name: Homebrew Formula Update
    runs-on: ubuntu-latest
    needs: [version-validation, create-release]
    steps:
      - name: Update Homebrew formula
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.HOMEBREW_TOKEN }}
          commit-message: "navlambda-studio ${{ needs.version-validation.outputs.version }}"
          title: "navlambda-studio ${{ needs.version-validation.outputs.version }}"
          body: |
            Updates navlambda-studio formula to version ${{ needs.version-validation.outputs.version }}.
            
            Release notes: https://github.com/navlambda/studio/releases/tag/v${{ needs.version-validation.outputs.version }}
          branch: update-navlambda-studio-${{ needs.version-validation.outputs.version }}
          base: main

  # Release Documentation
  release-documentation:
    name: Release Documentation
    runs-on: ubuntu-latest
    needs: [version-validation, create-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate migration guide
        run: |
          VERSION="${{ needs.version-validation.outputs.version }}"
          npm run docs:migration -- --version $VERSION

      - name: Generate API changelog
        run: |
          VERSION="${{ needs.version-validation.outputs.version }}"
          npm run docs:api-changelog -- --version $VERSION

      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/dist
          cname: docs.navlambda.studio

  # Post-Release Validation
  post-release-validation:
    name: Post-Release Validation
    runs-on: ubuntu-latest
    needs: [create-release, docker-release, npm-release]
    steps:
      - name: Validate Docker image
        run: |
          VERSION="${{ needs.version-validation.outputs.version }}"
          docker pull navlambda/studio:$VERSION
          docker run --rm navlambda/studio:$VERSION --version

      - name: Validate NPM package
        run: |
          VERSION="${{ needs.version-validation.outputs.version }}"
          npm install navlambda-studio@$VERSION
          npx navlambda-studio --version

      - name: Validate GitHub release
        run: |
          VERSION="${{ needs.version-validation.outputs.version }}"
          curl -s https://api.github.com/repos/navlambda/studio/releases/tags/v$VERSION | jq -r '.tag_name' | grep -q "v$VERSION"

      - name: Run smoke tests
        run: |
          npm run test:smoke
          npm run test:installation

  # Release Notifications
  release-notifications:
    name: Release Notifications
    runs-on: ubuntu-latest
    needs: [post-release-validation]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_RELEASES }}
          fields: repo,message,commit,author,workflow
          text: |
            NAVÎ› Studio v${{ needs.version-validation.outputs.version }} has been released!
            
            â€¢ Docker: `navlambda/studio:${{ needs.version-validation.outputs.version }}`
            â€¢ NPM: `navlambda-studio@${{ needs.version-validation.outputs.version }}`
            â€¢ GitHub: https://github.com/navlambda/studio/releases/tag/v${{ needs.version-validation.outputs.version }}

      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "NAVÎ› Studio v${{ needs.version-validation.outputs.version }} Released"
          body: |
            NAVÎ› Studio version ${{ needs.version-validation.outputs.version }} has been successfully released!
            
            Release notes: https://github.com/navlambda/studio/releases/tag/v${{ needs.version-validation.outputs.version }}
            Documentation: https://docs.navlambda.studio
            
            Thank you for using NAVÎ› Studio!
          to: ${{ secrets.RELEASE_EMAIL_LIST }}

      - name: Update release metrics
        run: |
          VERSION="${{ needs.version-validation.outputs.version }}"
          npm run metrics:release -- --version $VERSION
          npm run analytics:release -- --version $VERSION

  # Cleanup and Maintenance
  cleanup:
    name: Cleanup & Maintenance
    runs-on: ubuntu-latest
    needs: [release-notifications]
    if: always()
    steps:
      - name: Delete old release artifacts
        uses: actions/delete-artifact@v2
        with:
          name: |
            release-*
            documentation-release
            security-scan-release
          min-versions-to-keep: 5

      - name: Clean up old Docker images
        run: |
          # Keep only last 10 versions
          docker images navlambda/studio --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | tail -n +11 | awk '{print $1}' | xargs -r docker rmi || true

      - name: Archive release data
        uses: actions/upload-artifact@v3
        with:
          name: release-archive-${{ needs.version-validation.outputs.version }}
          path: |
            reports/release/
            metrics/release/
          retention-days: 365