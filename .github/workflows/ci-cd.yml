name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '18'

jobs:
  # Quality Gates
  quality-gate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          node_modules
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/package-lock.json') }}
    - name: Run linting
      run: |
        npm run lint
        cargo clippy -- -D warnings
    - name: Run tests
      run: |
        npm test
        cargo test
    - name: Security scan
      uses: github/super-linter/slim@v5
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build and Test
  build-test:
    needs: quality-gate
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Install dependencies
      run: npm ci
    - name: Build frontend
      run: npm run build
    - name: Build Tauri
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tauriScript: npm run tauri build
    - name: Run integration tests
      run: npm run test:e2e

  # Security Scanning
  security-scan:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        path: '.'
        format: 'spdx-json'
        output-file: './sbom.spdx.json'
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: ./sbom.spdx.json

  # License Compliance
  license-check:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Check licenses
      run: npx license-checker --production --csv > licenses.csv
    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: licenses.csv
    - name: Check for forbidden licenses
      run: |
        if grep -q "GPL" licenses.csv; then
          echo "GPL license found - failing build"
          exit 1
        fi

  # Performance Testing
  performance-test:
    needs: license-check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    - name: Install dependencies
      run: npm ci
    - name: Run performance tests
      run: npm run test:perf
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: ./performance-results.json

  # Deploy to Staging
  deploy-staging:
    needs: [build-test, security-scan, license-check, performance-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: navlambda/studio-ide:staging-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add staging deployment commands here

  # Production Deployment Gates
  production-gates:
    needs: [deploy-staging, security-scan, license-check, performance-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: Manual approval required
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: frankvanlaarhoven
        minimum-approvals: 1
        issue-title: "Deploy NAVΛ Studio IDE to Production"
        issue-body: "Please review and approve production deployment"
        exclude-workflow-initiator-as-approver: false
    - name: Quality gate check
      run: |
        # Additional production readiness checks
        echo "Running production deployment gates..."
        # Check test coverage
        # Check performance benchmarks
        # Check security scan results
        # Check license compliance
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add production deployment commands here

  # Release Management
  release:
    needs: production-gates
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Build release artifacts
      run: |
        npm run build
        npm run tauri build
    - name: Create release archives
      run: |
        tar -czf navlambda-studio-ide-linux.tar.gz src-tauri/target/release/bundle/appimage/NAVΛ\ Studio\ IDE*.AppImage
        tar -czf navlambda-studio-ide-macos.tar.gz src-tauri/target/release/bundle/dmg/NAVΛ\ Studio\ IDE*.dmg
        zip -r navlambda-studio-ide-windows.zip src-tauri/target/release/bundle/msi/NAVΛ\ Studio\ IDE*.msi
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./navlambda-studio-ide-linux.tar.gz
        asset_name: navlambda-studio-ide-linux.tar.gz
        asset_content_type: application/gzip
    - name: Upload macOS release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./navlambda-studio-ide-macos.tar.gz
        asset_name: navlambda-studio-ide-macos.tar.gz
        asset_content_type: application/gzip
    - name: Upload Windows release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./navlambda-studio-ide-windows.zip
        asset_name: navlambda-studio-ide-windows.zip
        asset_content_type: application/zip

  # Helm Promotion
  helm-promote:
    needs: release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.0
    - name: Login to Helm registry
      run: |
        helm registry login -u ${{ secrets.HELM_USERNAME }} -p ${{ secrets.HELM_PASSWORD }} ${{ secrets.HELM_REGISTRY }}
    - name: Package Helm chart
      run: |
        cd helm
        helm package navlambda-studio-ide
    - name: Push Helm chart
      run: |
        cd helm
        helm push navlambda-studio-ide-${{ github.event.release.tag_name }}.tgz oci://${{ secrets.HELM_REGISTRY }}/navlambda

  # Documentation
  docs:
    needs: release
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Build docs
      run: |
        cd docs
        npm install
        npm run build
    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/build

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18.x'
  RUST_VERSION: '1.75'
  CARGO_TERM_COLOR: always

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies
        run: |
          npm ci
          cargo fetch

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npm run format:check

      - name: Run Rust formatting check
        run: cargo fmt -- --check

      - name: Run Rust clippy
        run: cargo clippy -- -D warnings

      - name: Run security audit
        run: |
          npm audit --audit-level moderate
          cargo audit

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Unit Testing
  unit-tests:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16.x, 18.x, 20.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies
        run: |
          npm ci
          cargo fetch

      - name: Run TypeScript tests
        run: npm run test:unit

      - name: Run Rust tests
        run: cargo test

      - name: Generate test coverage
        run: |
          npm run test:coverage
          cargo tarpaulin --out Xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Integration Testing
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    services:
      ros:
        image: ros:humble
        options: --privileged
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup ROS environment
        run: |
          source /opt/ros/humble/setup.bash
          echo "ROS_DISTRO=humble" >> $GITHUB_ENV
          echo "ROS_ROOT=/opt/ros/humble" >> $GITHUB_ENV

      - name: Install ROS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ros-humble-desktop \
            ros-humble-navigation2 \
            ros-humble-nav2-bringup \
            python3-colcon-common-extensions

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run integration tests
        run: |
          source /opt/ros/humble/setup.bash
          npm run test:integration

      - name: Test ROS integration
        run: |
          source /opt/ros/humble/setup.bash
          npm run test:ros-integration

  # End-to-End Testing
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 10
          npx wait-on http://localhost:3000

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: npm run test:performance

      - name: Generate performance report
        run: npm run performance:report

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-report
          path: performance-report/
          retention-days: 30

  # Security Testing
  security-tests:
    name: Security Testing
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'navlambda-studio'
          path: '.'
          format: 'HTML'

      - name: Upload OWASP results
        uses: actions/upload-artifact@v3
        with:
          name: owasp-report
          path: reports/

  # Build and Package
  build:
    name: Build & Package
    runs-on: ${{ matrix.os }}
    needs: [unit-tests, integration-tests, e2e-tests]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies
        run: |
          npm ci
          cargo fetch

      - name: Build application
        run: npm run build

      - name: Build Tauri app
        run: npm run tauri:build

      - name: Package application
        run: npm run package

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: navlambda-studio-${{ matrix.platform }}
          path: dist/
          retention-days: 90

  # Documentation Build
  documentation:
    name: Documentation Build
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build API documentation
        run: npm run docs:api

      - name: Build user documentation
        run: npm run docs:user

      - name: Build tutorials
        run: npm run docs:tutorials

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/dist

  # Docker Build and Push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build, documentation]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: navlambda/studio
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deployment - Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add your staging deployment commands here
          # This could be kubectl, helm, terraform, etc.

  # Deployment - Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add your production deployment commands here

  # Release Management
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, deploy-production]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Create GitHub release assets
        run: |
          cd artifacts/
          for dir in */; do
            cd "$dir"
            zip -r "../${dir%/}.zip" .
            cd ..
          done

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./artifacts/
          asset_name: navlambda-studio-${{ matrix.platform }}.zip
          asset_content_type: application/zip

  # Post-build Cleanup and Notifications
  cleanup:
    name: Cleanup & Notifications
    runs-on: ubuntu-latest
    needs: [release]
    if: always()
    steps:
      - name: Clean up old artifacts
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'navlambda-studio'
          package-type: 'container'
          min-versions-to-keep: 5

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#ci-cd'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow