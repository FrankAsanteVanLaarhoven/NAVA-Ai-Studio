name: Performance Monitoring

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:
  workflow_call:

env:
  NODE_VERSION: '18.x'
  PERFORMANCE_THRESHOLD: 80

jobs:
  performance-baseline:
    name: Establish Performance Baseline
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run performance baseline tests
        run: |
          npm run test:performance:baseline
          npm run performance:collect-baseline

      - name: Upload baseline data
        uses: actions/upload-artifact@v3
        with:
          name: performance-baseline
          path: performance/baseline.json
          retention-days: 90

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: performance-baseline
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download baseline data
        uses: actions/download-artifact@v3
        with:
          name: performance-baseline
          path: performance/

      - name: Run performance monitoring
        run: |
          npm run performance:monitor
          npm run performance:analyze

      - name: Generate performance report
        run: npm run performance:report

      - name: Upload performance report
        uses: actions/upload-artifact@v3
        with:
          name: performance-report-${{ github.run_number }}
          path: performance/report/
          retention-days: 30

      - name: Check performance regression
        id: regression-check
        run: |
          PERFORMANCE_SCORE=$(cat performance/report/score.txt)
          echo "PERFORMANCE_SCORE=$PERFORMANCE_SCORE" >> $GITHUB_OUTPUT
          
          if [ "$PERFORMANCE_SCORE" -lt "${{ env.PERFORMANCE_THRESHOLD }}" ]; then
            echo "Performance regression detected! Score: $PERFORMANCE_SCORE"
            exit 1
          fi

  load-testing:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: performance-baseline
    strategy:
      matrix:
        scenario: [light, moderate, heavy, extreme]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application for load testing
        run: |
          npm start &
          sleep 10
          npx wait-on http://localhost:3000

      - name: Run load tests - ${{ matrix.scenario }}
        run: |
          npm run test:load:${{ matrix.scenario }}

      - name: Analyze load test results
        run: |
          npm run analyze:load:${{ matrix.scenario }}

      - name: Upload load test results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-${{ matrix.scenario }}-${{ github.run_number }}
          path: performance/load-tests/${{ matrix.scenario }}/
          retention-days: 30

  memory-leak-detection:
    name: Memory Leak Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run memory leak tests
        run: |
          npm run test:memory-leak
          npm run analyze:memory-leak

      - name: Generate memory leak report
        run: npm run report:memory-leak

      - name: Upload memory leak report
        uses: actions/upload-artifact@v3
        with:
          name: memory-leak-report-${{ github.run_number }}
          path: performance/memory-leak/
          retention-days: 30

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Analyze bundle size
        run: |
          npm run analyze:bundle
          npm run compare:bundle

      - name: Check bundle size limits
        run: |
          BUNDLE_SIZE=$(cat performance/bundle/size.txt)
          LIMIT=5000000  # 5MB limit
          
          if [ "$BUNDLE_SIZE" -gt "$LIMIT" ]; then
            echo "Bundle size exceeded limit: $BUNDLE_SIZE > $LIMIT"
            exit 1
          fi

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis-${{ github.run_number }}
          path: performance/bundle/
          retention-days: 30

  lighthouse-audit:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          sleep 10
          npx wait-on http://localhost:3000

      - name: Run Lighthouse audit
        run: |
          npm run lighthouse:audit
          npm run lighthouse:report

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-report-${{ github.run_number }}
          path: performance/lighthouse/
          retention-days: 30

      - name: Check Lighthouse scores
        run: |
          PERFORMANCE_SCORE=$(cat performance/lighthouse/performance-score.txt)
          ACCESSIBILITY_SCORE=$(cat performance/lighthouse/accessibility-score.txt)
          BEST_PRACTICES_SCORE=$(cat performance/lighthouse/best-practices-score.txt)
          SEO_SCORE=$(cat performance/lighthouse/seo-score.txt)
          
          echo "Performance: $PERFORMANCE_SCORE"
          echo "Accessibility: $ACCESSIBILITY_SCORE"
          echo "Best Practices: $BEST_PRACTICES_SCORE"
          echo "SEO: $SEO_SCORE"
          
          # Fail if any score is below 80
          if [ "$PERFORMANCE_SCORE" -lt "80" ] || \
             [ "$ACCESSIBILITY_SCORE" -lt "80" ] || \
             [ "$BEST_PRACTICES_SCORE" -lt "80" ] || \
             [ "$SEO_SCORE" -lt "80" ]; then
            echo "Lighthouse audit failed - scores too low"
            exit 1
          fi

  performance-comparison:
    name: Performance Comparison
    runs-on: ubuntu-latest
    needs: [performance-monitoring, load-testing, lighthouse-audit]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all performance artifacts
        uses: actions/download-artifact@v3
        with:
          path: performance-artifacts/

      - name: Compare performance with baseline
        run: |
          npm run performance:compare
          npm run performance:trend-analysis

      - name: Generate performance summary
        run: |
          npm run performance:summary
          npm run performance:recommendations

      - name: Upload performance comparison
        uses: actions/upload-artifact@v3
        with:
          name: performance-comparison-${{ github.run_number }}
          path: performance/comparison/
          retention-days: 90

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('performance/comparison/summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Performance Report\n\n${summary}`
            });

  performance-alerting:
    name: Performance Alerting
    runs-on: ubuntu-latest
    needs: [performance-comparison]
    if: failure()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#performance-alerts'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_PERFORMANCE }}
          fields: repo,message,commit,author,workflow
          text: 'Performance regression detected in NAVÎ› Studio!'

      - name: Create GitHub issue
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('performance/comparison/summary.md', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Performance Regression - ${new Date().toISOString()}`,
              body: `## Performance Regression Detected\n\n${summary}\n\n## Action Required\n- [ ] Investigate root cause\n- [ ] Implement performance improvements\n- [ ] Re-run performance tests\n- [ ] Verify improvements`,
              labels: ['performance', 'regression', 'high-priority']
            });

  cleanup:
    name: Cleanup Old Performance Data
    runs-on: ubuntu-latest
    needs: [performance-comparison]
    if: always()
    steps:
      - name: Delete old performance artifacts
        uses: actions/delete-artifact@v2
        with:
          name: performance-report-*
          min-versions-to-keep: 10

      - name: Cleanup old baseline data
        run: |
          # Keep only last 30 days of baseline data
          find performance/baselines/ -name "*.json" -mtime +30 -delete || true